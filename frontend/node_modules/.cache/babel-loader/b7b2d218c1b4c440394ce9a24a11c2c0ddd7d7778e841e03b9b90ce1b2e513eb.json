{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\nclass BackendApi {\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${BackendApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // New method to fetch data from the FRED API or similar external APIs\n  static async fetchFredData(seriesId) {\n    try {\n      const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n        params: {\n          seriesId\n        }\n      });\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching FRED data:', error);\n      throw error;\n    }\n  }\n\n  // Individual API routes\n\n  static async fetchFinancialData(symbol, start, end) {\n    try {\n      const params = {\n        symbol\n      };\n      if (start && end) {\n        params.start = start;\n        params.end = end;\n      }\n      const response = await axios.get(`${BASE_URL}/forex/data`, {\n        params\n      });\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching financial data:', error);\n      throw error;\n    }\n  }\n\n  /** Scraping function */\n\n  static async fetchStockPrice(symbol) {\n    try {\n      const response = await axios.get(`${BASE_URL}/scrape/stock-price?symbol=${symbol}`);\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching stock price:', error);\n      throw error;\n    }\n  }\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get companies (filtered by name if not undefined) */\n\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", {\n      name\n    });\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get list of jobs (filtered by title if not undefined) */\n\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", {\n      title\n    });\n    return res.jobs;\n  }\n\n  /** Apply to a job */\n\n  static async applyToJob(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n\n  /** Get token for login from username, password. */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Signup for site. */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Save user profile page. */\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\nexport default BackendApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","BackendApi","request","endpoint","data","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","fetchFredData","seriesId","get","fetchFinancialData","symbol","start","end","fetchStockPrice","getCurrentUser","username","res","user","getCompanies","name","companies","getCompany","handle","company","getJobs","title","jobs","applyToJob","id","login","signup","saveProfile"],"sources":["/Users/bradyflannery/Documents/Coding Projects/north_shore/frontend/src/api/BackEndAPI.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\nclass BackendApi {\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${BackendApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // New method to fetch data from the FRED API or similar external APIs\n  static async fetchFredData(seriesId) {\n    try {\n      const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n        params: { seriesId },\n      });\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching FRED data:', error);\n      throw error;\n    }\n  }\n\n\n  // Individual API routes\n \n      static async fetchFinancialData(symbol, start, end) {\n        try {\n          const params = { symbol };\n          if (start && end) {\n            params.start = start;\n            params.end = end;\n          }\n          const response = await axios.get(`${BASE_URL}/forex/data`, { params });\n          return response.data.data;\n        } catch (error) {\n          console.error('Error fetching financial data:', error);\n          throw error;\n        }\n      }\n  \n\n  /** Scraping function */\n\n  static async fetchStockPrice(symbol) {\n    try {\n      const response = await axios.get(`${BASE_URL}/scrape/stock-price?symbol=${symbol}`);\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching stock price:', error);\n      throw error;\n    }\n  }\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get companies (filtered by name if not undefined) */\n\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", { name });\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get list of jobs (filtered by title if not undefined) */\n\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", { title });\n    return res.jobs;\n  }\n\n  /** Apply to a job */\n\n  static async applyToJob(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n\n  /** Get token for login from username, password. */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Signup for site. */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Save user profile page. */\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n\n\n}\n\n\nexport default BackendApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}