{"ast":null,"code":"var _jsxFileName = \"/Users/bradyflannery/Documents/Coding Projects/north_shore/frontend/src/phillips-curves/PhillipsCurveGraph.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Line } from 'react-chartjs-2';\n// import axios from 'axios';\n// import 'chart.js/auto';\n\n// const BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\"; // Your backend Express server\n\n// const economies = [\n//     { label: 'United States', inflationSeries: 'CPIAUCSL', unemploymentSeries: 'UNRATE' },\n//     { label: 'United Kingdom', inflationSeries: 'GBRCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTGBQ156S' },\n//     { label: 'Germany', inflationSeries: 'DEUCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTDEQ156S' },\n//     { label: 'Japan', inflationSeries: 'JPNCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTJPQ156S' },\n// ];\n\n// const fetchData = async (seriesId) => {\n//     try {\n//         const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n//             params: { seriesId }\n//         });\n//         return response.data.data.map(obs => ({\n//             date: obs.date,\n//             value: parseFloat(obs.value)\n//         }));\n//     } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         return [];\n//     }\n// };\n\n// const PhillipsCurveGraph = () => {\n//     const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n//     const [data, setData] = useState([]);\n\n//     useEffect(() => {\n//         const getData = async () => {\n//             const inflationData = await fetchData(selectedEconomy.inflationSeries);\n//             const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n\n//             if (inflationData.length && unemploymentData.length) {\n//                 const mergedData = inflationData.map((inflation) => {\n//                     const unemployment = unemploymentData.find(u => u.date === inflation.date);\n//                     return {\n//                         date: inflation.date,\n//                         inflation: inflation.value,\n//                         unemployment: unemployment ? unemployment.value : null\n//                     };\n//                 });\n//                 setData(mergedData);\n//             } else {\n//                 setData([]); // Clear data if there's an issue\n//             }\n//         };\n\n//         getData();\n//     }, [selectedEconomy]);\n\n//     const chartData = {\n//         labels: data.map(entry => entry.date),\n//         datasets: [\n//             {\n//                 label: 'Inflation Rate',\n//                 data: data.map(entry => entry.inflation),\n//                 borderColor: 'rgba(75,192,192,1)',\n//                 backgroundColor: 'rgba(75,192,192,0.2)',\n//                 yAxisID: 'y-axis-1',\n//             },\n//             {\n//                 label: 'Unemployment Rate',\n//                 data: data.map(entry => entry.unemployment),\n//                 borderColor: 'rgba(153,102,255,1)',\n//                 backgroundColor: 'rgba(153,102,255,0.2)',\n//                 yAxisID: 'y-axis-2',\n//             }\n//         ]\n//     };\n\n//     const options = {\n//         scales: {\n//             x: {\n//                 title: {\n//                     display: true,\n//                     text: 'Date',\n//                 },\n//             },\n//             'y-axis-1': {\n//                 type: 'linear',\n//                 position: 'left',\n//                 title: {\n//                     display: true,\n//                     text: 'Inflation Rate (%)',\n//                 },\n//             },\n//             'y-axis-2': {\n//                 type: 'linear',\n//                 position: 'right',\n//                 title: {\n//                     display: true,\n//                     text: 'Unemployment Rate (%)',\n//                 },\n//                 grid: {\n//                     drawOnChartArea: false,\n//                 },\n//             },\n//         },\n//     };\n\n//     return (\n//         <div>\n//             <h2>Phillips Curve: {selectedEconomy.label}</h2>\n//             <select\n//                 value={selectedEconomy.label}\n//                 onChange={(e) => setSelectedEconomy(economies.find(econ => econ.label === e.target.value))}\n//             >\n//                 {economies.map(econ => (\n//                     <option key={econ.label} value={econ.label}>{econ.label}</option>\n//                 ))}\n//             </select>\n//             <div>\n//                 <Line data={chartData} options={options} />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default PhillipsCurveGraph;\n\nimport React, { useState, useEffect } from 'react';\nimport { Scatter } from 'react-chartjs-2';\nimport axios from 'axios';\nimport 'chart.js/auto'; // Ensure Chart.js is imported correctly\nimport { create, all } from 'mathjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst math = create(all);\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\"; // Your backend Express server\n\nconst economies = [{\n  label: 'United States',\n  inflationSeries: 'CPIAUCSL',\n  unemploymentSeries: 'UNRATE'\n}, {\n  label: 'United Kingdom',\n  inflationSeries: 'GBRCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTGBQ156S'\n}, {\n  label: 'Germany',\n  inflationSeries: 'DEUCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTDEQ156S'\n}, {\n  label: 'Japan',\n  inflationSeries: 'JPNCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTJPQ156S'\n}];\nconst fetchData = async seriesId => {\n  try {\n    const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n      params: {\n        seriesId\n      }\n    });\n    return response.data.data.map(obs => ({\n      date: obs.date,\n      value: parseFloat(obs.value)\n    }));\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    return [];\n  }\n};\nconst PhillipsCurveGraph = () => {\n  _s();\n  const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const getData = async () => {\n      const inflationData = await fetchData(selectedEconomy.inflationSeries);\n      const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n      if (inflationData.length && unemploymentData.length) {\n        const mergedData = inflationData.map(inflation => {\n          const unemployment = unemploymentData.find(u => u.date === inflation.date);\n          return {\n            date: inflation.date,\n            inflation: inflation.value,\n            unemployment: unemployment ? unemployment.value : null\n          };\n        }).filter(entry => entry.unemployment !== null);\n        setData(mergedData);\n      } else {\n        setData([]); // Clear data if there's an issue\n      }\n    };\n    getData();\n  }, [selectedEconomy]);\n\n  // Fit a curve to the data points using math.js\n  const fitCurve = data => {\n    const points = data.map(d => [d.unemployment, d.inflation]);\n    const x = points.map(p => p[0]);\n    const y = points.map(p => p[1]);\n    const n = x.length;\n    const xSum = x.reduce((acc, val) => acc + val, 0);\n    const ySum = y.reduce((acc, val) => acc + val, 0);\n    const xySum = x.reduce((acc, val, idx) => acc + val * y[idx], 0);\n    const xxSum = x.reduce((acc, val) => acc + val * val, 0);\n    const a = (n * xySum - xSum * ySum) / (n * xxSum - xSum * xSum);\n    const b = (ySum - a * xSum) / n;\n    return x.map(xVal => ({\n      x: xVal,\n      y: a * xVal + b\n    }));\n  };\n  const curveData = fitCurve(data);\n  const chartData = {\n    datasets: [{\n      label: 'Data Points',\n      data: data.map(entry => ({\n        x: entry.unemployment,\n        y: entry.inflation\n      })),\n      backgroundColor: 'rgba(75,192,192,0.6)',\n      pointRadius: 5\n    }, {\n      label: 'Fitted Curve',\n      data: curveData,\n      borderColor: 'rgba(255,99,132,1)',\n      backgroundColor: 'rgba(255,99,132,0.2)',\n      type: 'line',\n      borderWidth: 2\n    }]\n  };\n  const options = {\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Unemployment Rate (%)'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Inflation Rate (%)'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Phillips Curve: \", selectedEconomy.label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedEconomy.label,\n      onChange: e => setSelectedEconomy(economies.find(econ => econ.label === e.target.value)),\n      children: economies.map(econ => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: econ.label,\n        children: econ.label\n      }, econ.label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Scatter, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 9\n  }, this);\n};\n_s(PhillipsCurveGraph, \"tUJeP57Ba7aX2IyEB2NSaqb5avM=\");\n_c = PhillipsCurveGraph;\nexport default PhillipsCurveGraph;\nvar _c;\n$RefreshReg$(_c, \"PhillipsCurveGraph\");","map":{"version":3,"names":["React","useState","useEffect","Scatter","axios","create","all","jsxDEV","_jsxDEV","math","BASE_URL","process","env","REACT_APP_BASE_URL","economies","label","inflationSeries","unemploymentSeries","fetchData","seriesId","response","get","params","data","map","obs","date","value","parseFloat","error","console","PhillipsCurveGraph","_s","selectedEconomy","setSelectedEconomy","setData","getData","inflationData","unemploymentData","length","mergedData","inflation","unemployment","find","u","filter","entry","fitCurve","points","d","x","p","y","n","xSum","reduce","acc","val","ySum","xySum","idx","xxSum","a","b","xVal","curveData","chartData","datasets","backgroundColor","pointRadius","borderColor","type","borderWidth","options","scales","title","display","text","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","econ","target","_c","$RefreshReg$"],"sources":["/Users/bradyflannery/Documents/Coding Projects/north_shore/frontend/src/phillips-curves/PhillipsCurveGraph.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Line } from 'react-chartjs-2';\n// import axios from 'axios';\n// import 'chart.js/auto';\n\n// const BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\"; // Your backend Express server\n\n// const economies = [\n//     { label: 'United States', inflationSeries: 'CPIAUCSL', unemploymentSeries: 'UNRATE' },\n//     { label: 'United Kingdom', inflationSeries: 'GBRCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTGBQ156S' },\n//     { label: 'Germany', inflationSeries: 'DEUCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTDEQ156S' },\n//     { label: 'Japan', inflationSeries: 'JPNCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTJPQ156S' },\n// ];\n\n// const fetchData = async (seriesId) => {\n//     try {\n//         const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n//             params: { seriesId }\n//         });\n//         return response.data.data.map(obs => ({\n//             date: obs.date,\n//             value: parseFloat(obs.value)\n//         }));\n//     } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         return [];\n//     }\n// };\n\n// const PhillipsCurveGraph = () => {\n//     const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n//     const [data, setData] = useState([]);\n\n//     useEffect(() => {\n//         const getData = async () => {\n//             const inflationData = await fetchData(selectedEconomy.inflationSeries);\n//             const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n\n//             if (inflationData.length && unemploymentData.length) {\n//                 const mergedData = inflationData.map((inflation) => {\n//                     const unemployment = unemploymentData.find(u => u.date === inflation.date);\n//                     return {\n//                         date: inflation.date,\n//                         inflation: inflation.value,\n//                         unemployment: unemployment ? unemployment.value : null\n//                     };\n//                 });\n//                 setData(mergedData);\n//             } else {\n//                 setData([]); // Clear data if there's an issue\n//             }\n//         };\n\n//         getData();\n//     }, [selectedEconomy]);\n\n//     const chartData = {\n//         labels: data.map(entry => entry.date),\n//         datasets: [\n//             {\n//                 label: 'Inflation Rate',\n//                 data: data.map(entry => entry.inflation),\n//                 borderColor: 'rgba(75,192,192,1)',\n//                 backgroundColor: 'rgba(75,192,192,0.2)',\n//                 yAxisID: 'y-axis-1',\n//             },\n//             {\n//                 label: 'Unemployment Rate',\n//                 data: data.map(entry => entry.unemployment),\n//                 borderColor: 'rgba(153,102,255,1)',\n//                 backgroundColor: 'rgba(153,102,255,0.2)',\n//                 yAxisID: 'y-axis-2',\n//             }\n//         ]\n//     };\n\n//     const options = {\n//         scales: {\n//             x: {\n//                 title: {\n//                     display: true,\n//                     text: 'Date',\n//                 },\n//             },\n//             'y-axis-1': {\n//                 type: 'linear',\n//                 position: 'left',\n//                 title: {\n//                     display: true,\n//                     text: 'Inflation Rate (%)',\n//                 },\n//             },\n//             'y-axis-2': {\n//                 type: 'linear',\n//                 position: 'right',\n//                 title: {\n//                     display: true,\n//                     text: 'Unemployment Rate (%)',\n//                 },\n//                 grid: {\n//                     drawOnChartArea: false,\n//                 },\n//             },\n//         },\n//     };\n\n//     return (\n//         <div>\n//             <h2>Phillips Curve: {selectedEconomy.label}</h2>\n//             <select\n//                 value={selectedEconomy.label}\n//                 onChange={(e) => setSelectedEconomy(economies.find(econ => econ.label === e.target.value))}\n//             >\n//                 {economies.map(econ => (\n//                     <option key={econ.label} value={econ.label}>{econ.label}</option>\n//                 ))}\n//             </select>\n//             <div>\n//                 <Line data={chartData} options={options} />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default PhillipsCurveGraph;\n\nimport React, { useState, useEffect } from 'react';\nimport { Scatter } from 'react-chartjs-2';\nimport axios from 'axios';\nimport 'chart.js/auto'; // Ensure Chart.js is imported correctly\nimport { create, all } from 'mathjs';\n\nconst math = create(all);\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\"; // Your backend Express server\n\nconst economies = [\n    { label: 'United States', inflationSeries: 'CPIAUCSL', unemploymentSeries: 'UNRATE' },\n    { label: 'United Kingdom', inflationSeries: 'GBRCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTGBQ156S' },\n    { label: 'Germany', inflationSeries: 'DEUCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTDEQ156S' },\n    { label: 'Japan', inflationSeries: 'JPNCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTJPQ156S' },\n];\n\nconst fetchData = async (seriesId) => {\n    try {\n        const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n            params: { seriesId }\n        });\n        return response.data.data.map(obs => ({\n            date: obs.date,\n            value: parseFloat(obs.value)\n        }));\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        return [];\n    }\n};\n\nconst PhillipsCurveGraph = () => {\n    const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        const getData = async () => {\n            const inflationData = await fetchData(selectedEconomy.inflationSeries);\n            const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n\n            if (inflationData.length && unemploymentData.length) {\n                const mergedData = inflationData.map((inflation) => {\n                    const unemployment = unemploymentData.find(u => u.date === inflation.date);\n                    return {\n                        date: inflation.date,\n                        inflation: inflation.value,\n                        unemployment: unemployment ? unemployment.value : null\n                    };\n                }).filter(entry => entry.unemployment !== null);\n\n                setData(mergedData);\n            } else {\n                setData([]); // Clear data if there's an issue\n            }\n        };\n\n        getData();\n    }, [selectedEconomy]);\n\n    // Fit a curve to the data points using math.js\n    const fitCurve = (data) => {\n        const points = data.map(d => [d.unemployment, d.inflation]);\n        const x = points.map(p => p[0]);\n        const y = points.map(p => p[1]);\n\n        const n = x.length;\n        const xSum = x.reduce((acc, val) => acc + val, 0);\n        const ySum = y.reduce((acc, val) => acc + val, 0);\n        const xySum = x.reduce((acc, val, idx) => acc + val * y[idx], 0);\n        const xxSum = x.reduce((acc, val) => acc + val * val, 0);\n\n        const a = (n * xySum - xSum * ySum) / (n * xxSum - xSum * xSum);\n        const b = (ySum - a * xSum) / n;\n\n        return x.map(xVal => ({\n            x: xVal,\n            y: a * xVal + b\n        }));\n    };\n\n    const curveData = fitCurve(data);\n\n    const chartData = {\n        datasets: [\n            {\n                label: 'Data Points',\n                data: data.map(entry => ({\n                    x: entry.unemployment,\n                    y: entry.inflation\n                })),\n                backgroundColor: 'rgba(75,192,192,0.6)',\n                pointRadius: 5\n            },\n            {\n                label: 'Fitted Curve',\n                data: curveData,\n                borderColor: 'rgba(255,99,132,1)',\n                backgroundColor: 'rgba(255,99,132,0.2)',\n                type: 'line',\n                borderWidth: 2\n            }\n        ]\n    };\n\n    const options = {\n        scales: {\n            x: {\n                title: {\n                    display: true,\n                    text: 'Unemployment Rate (%)'\n                }\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: 'Inflation Rate (%)'\n                }\n            }\n        }\n    };\n\n    return (\n        <div>\n            <h2>Phillips Curve: {selectedEconomy.label}</h2>\n            <select\n                value={selectedEconomy.label}\n                onChange={(e) => setSelectedEconomy(economies.find(econ => econ.label === e.target.value))}\n            >\n                {economies.map(econ => (\n                    <option key={econ.label} value={econ.label}>{econ.label}</option>\n                ))}\n            </select>\n            <div>\n                <Scatter data={chartData} options={options} />\n            </div>\n        </div>\n    );\n};\n\nexport default PhillipsCurveGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}