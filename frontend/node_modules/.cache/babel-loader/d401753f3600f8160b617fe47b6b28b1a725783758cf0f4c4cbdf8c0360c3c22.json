{"ast":null,"code":"var _jsxFileName = \"/Users/bradyflannery/Documents/Coding Projects/north_shore/frontend/src/phillips-curves/PhillipsCurveGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\"; // Your backend Express server\n\nconst economies = [{\n  label: 'United States',\n  inflationSeries: 'CPIAUCSL',\n  unemploymentSeries: 'UNRATE'\n}, {\n  label: 'United Kingdom',\n  inflationSeries: 'GBRCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTGBQ156S'\n}, {\n  label: 'Germany',\n  inflationSeries: 'DEUCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTDEQ156S'\n}, {\n  label: 'Japan',\n  inflationSeries: 'JPNCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTJPQ156S'\n}];\nconst fetchData = async seriesId => {\n  try {\n    const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n      params: {\n        seriesId\n      }\n    });\n    return response.data.data.map(obs => ({\n      date: obs.date,\n      value: parseFloat(obs.value)\n    }));\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    return [];\n  }\n};\nconst PhillipsCurveGraph = () => {\n  _s();\n  const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const getData = async () => {\n      const inflationData = await fetchData(selectedEconomy.inflationSeries);\n      const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n      if (inflationData.length && unemploymentData.length) {\n        const mergedData = inflationData.map(inflation => {\n          const unemployment = unemploymentData.find(u => u.date === inflation.date);\n          return {\n            date: inflation.date,\n            inflation: inflation.value,\n            unemployment: unemployment ? unemployment.value : null\n          };\n        });\n        setData(mergedData);\n      } else {\n        setData([]); // Clear data if there's an issue\n      }\n    };\n    getData();\n  }, [selectedEconomy]);\n  const chartData = {\n    labels: data.map(entry => entry.date),\n    datasets: [{\n      label: 'Inflation Rate',\n      data: data.map(entry => entry.inflation),\n      borderColor: 'rgba(75,192,192,1)',\n      backgroundColor: 'rgba(75,192,192,0.2)',\n      yAxisID: 'y-axis-1'\n    }, {\n      label: 'Unemployment Rate',\n      data: data.map(entry => entry.unemployment),\n      borderColor: 'rgba(153,102,255,1)',\n      backgroundColor: 'rgba(153,102,255,0.2)',\n      yAxisID: 'y-axis-2'\n    }]\n  };\n  const options = {\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      },\n      'y-axis-1': {\n        type: 'linear',\n        position: 'left',\n        title: {\n          display: true,\n          text: 'Inflation Rate (%)'\n        }\n      },\n      'y-axis-2': {\n        type: 'linear',\n        position: 'right',\n        title: {\n          display: true,\n          text: 'Unemployment Rate (%)'\n        },\n        grid: {\n          drawOnChartArea: false\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Phillips Curve: \", selectedEconomy.label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedEconomy.label,\n      onChange: e => setSelectedEconomy(economies.find(econ => econ.label === e.target.value)),\n      children: economies.map(econ => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: econ.label,\n        children: econ.label\n      }, econ.label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n_s(PhillipsCurveGraph, \"tUJeP57Ba7aX2IyEB2NSaqb5avM=\");\n_c = PhillipsCurveGraph;\nexport default PhillipsCurveGraph;\nvar _c;\n$RefreshReg$(_c, \"PhillipsCurveGraph\");","map":{"version":3,"names":["React","useState","useEffect","Line","axios","jsxDEV","_jsxDEV","BASE_URL","process","env","REACT_APP_BASE_URL","economies","label","inflationSeries","unemploymentSeries","fetchData","seriesId","response","get","params","data","map","obs","date","value","parseFloat","error","console","PhillipsCurveGraph","_s","selectedEconomy","setSelectedEconomy","setData","getData","inflationData","unemploymentData","length","mergedData","inflation","unemployment","find","u","chartData","labels","entry","datasets","borderColor","backgroundColor","yAxisID","options","scales","x","title","display","text","type","position","grid","drawOnChartArea","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","econ","target","_c","$RefreshReg$"],"sources":["/Users/bradyflannery/Documents/Coding Projects/north_shore/frontend/src/phillips-curves/PhillipsCurveGraph.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport 'chart.js/auto';\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\"; // Your backend Express server\n\nconst economies = [\n    { label: 'United States', inflationSeries: 'CPIAUCSL', unemploymentSeries: 'UNRATE' },\n    { label: 'United Kingdom', inflationSeries: 'GBRCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTGBQ156S' },\n    { label: 'Germany', inflationSeries: 'DEUCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTDEQ156S' },\n    { label: 'Japan', inflationSeries: 'JPNCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTJPQ156S' },\n];\n\nconst fetchData = async (seriesId) => {\n    try {\n        const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n            params: { seriesId }\n        });\n        return response.data.data.map(obs => ({\n            date: obs.date,\n            value: parseFloat(obs.value)\n        }));\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        return [];\n    }\n};\n\nconst PhillipsCurveGraph = () => {\n    const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        const getData = async () => {\n            const inflationData = await fetchData(selectedEconomy.inflationSeries);\n            const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n\n            if (inflationData.length && unemploymentData.length) {\n                const mergedData = inflationData.map((inflation) => {\n                    const unemployment = unemploymentData.find(u => u.date === inflation.date);\n                    return {\n                        date: inflation.date,\n                        inflation: inflation.value,\n                        unemployment: unemployment ? unemployment.value : null\n                    };\n                });\n                setData(mergedData);\n            } else {\n                setData([]); // Clear data if there's an issue\n            }\n        };\n\n        getData();\n    }, [selectedEconomy]);\n\n    const chartData = {\n        labels: data.map(entry => entry.date),\n        datasets: [\n            {\n                label: 'Inflation Rate',\n                data: data.map(entry => entry.inflation),\n                borderColor: 'rgba(75,192,192,1)',\n                backgroundColor: 'rgba(75,192,192,0.2)',\n                yAxisID: 'y-axis-1',\n            },\n            {\n                label: 'Unemployment Rate',\n                data: data.map(entry => entry.unemployment),\n                borderColor: 'rgba(153,102,255,1)',\n                backgroundColor: 'rgba(153,102,255,0.2)',\n                yAxisID: 'y-axis-2',\n            }\n        ]\n    };\n\n    const options = {\n        scales: {\n            x: {\n                title: {\n                    display: true,\n                    text: 'Date',\n                },\n            },\n            'y-axis-1': {\n                type: 'linear',\n                position: 'left',\n                title: {\n                    display: true,\n                    text: 'Inflation Rate (%)',\n                },\n            },\n            'y-axis-2': {\n                type: 'linear',\n                position: 'right',\n                title: {\n                    display: true,\n                    text: 'Unemployment Rate (%)',\n                },\n                grid: {\n                    drawOnChartArea: false,\n                },\n            },\n        },\n    };\n\n    return (\n        <div>\n            <h2>Phillips Curve: {selectedEconomy.label}</h2>\n            <select\n                value={selectedEconomy.label}\n                onChange={(e) => setSelectedEconomy(economies.find(econ => econ.label === e.target.value))}\n            >\n                {economies.map(econ => (\n                    <option key={econ.label} value={econ.label}>{econ.label}</option>\n                ))}\n            </select>\n            <div>\n                <Line data={chartData} options={options} />\n            </div>\n        </div>\n    );\n};\n\nexport default PhillipsCurveGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}