{"ast":null,"code":"var _jsxFileName = \"/Users/bradyflannery/Documents/Coding Projects/north_shore/frontend/src/phillips-curves/PhillipsCurveGraph.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Scatter } from 'react-chartjs-2';\n// import axios from 'axios';\n// import 'chart.js/auto'; // Ensure Chart.js is imported correctly\n// import regression from 'regression';\n\n// const BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\"; // Your backend Express server\n\n// // Expanded list of economies\n// const economies = [\n//     { label: 'United States', inflationSeries: 'CPIAUCSL', unemploymentSeries: 'UNRATE' },\n//     { label: 'United Kingdom', inflationSeries: 'GBRCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTGBQ156S' },\n//     { label: 'Germany', inflationSeries: 'DEUCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTDEQ156S' },\n//     { label: 'Japan', inflationSeries: 'JPNCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTJPQ156S' },\n//     // Add more economies here as needed\n// ];\n\n// const fetchData = async (seriesId) => {\n//     try {\n//         const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n//             params: { seriesId }\n//         });\n//         return response.data.data.map(obs => ({\n//             date: obs.date,\n//             value: parseFloat(obs.value)\n//         }));\n//     } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         return [];\n//     }\n// };\n\n// const PhillipsCurveGraph = () => {\n//     const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n//     const [data, setData] = useState([]);\n\n//     useEffect(() => {\n//         const getData = async () => {\n//             const inflationData = await fetchData(selectedEconomy.inflationSeries);\n//             const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n\n//             if (inflationData.length && unemploymentData.length) {\n//                 // Calculate previous year's average inflation\n//                 const averagedInflationData = inflationData.map((inflation, index) => {\n//                     if (index < 4) return null; // Not enough data to calculate average\n//                     const pastYearData = inflationData.slice(index - 4, index);\n//                     const avgInflation = pastYearData.reduce((sum, entry) => sum + entry.value, 0) / 4;\n//                     return {\n//                         date: inflation.date,\n//                         inflation: inflation.value - avgInflation,\n//                         unemployment: unemploymentData.find(u => u.date === inflation.date)?.value\n//                     };\n//                 }).filter(entry => entry && entry.unemployment != null);\n\n//                 setData(averagedInflationData);\n//             } else {\n//                 setData([]); // Clear data if there's an issue\n//             }\n//         };\n\n//         getData();\n//     }, [selectedEconomy]);\n\n//     // Fit the Phillips Curve regression\n//     const fitCurve = (data) => {\n//         const points = data.map(d => [d.unemployment, d.inflation]);\n\n//         // Perform linear regression\n//         const result = regression.linear(points);\n\n//         // Generate curve data\n//         const curveData = points.map(point => ({\n//             x: point[0],\n//             y: result.predict(point[0])[1]\n//         }));\n\n//         return curveData;\n//     };\n\n//     const curveData = fitCurve(data);\n\n//     const chartData = {\n//         datasets: [\n//             {\n//                 label: 'Data Points',\n//                 data: data.map(entry => ({\n//                     x: entry.unemployment,\n//                     y: entry.inflation\n//                 })),\n//                 backgroundColor: 'rgba(75,192,192,0.6)',\n//                 pointRadius: 5\n//             },\n//             {\n//                 label: 'Fitted Curve',\n//                 data: curveData,\n//                 borderColor: 'rgba(255,99,132,1)',\n//                 backgroundColor: 'rgba(255,99,132,0.2)',\n//                 type: 'line',\n//                 borderWidth: 2\n//             }\n//         ]\n//     };\n\n//     const options = {\n//         scales: {\n//             x: {\n//                 title: {\n//                     display: true,\n//                     text: 'Unemployment Rate (%)'\n//                 }\n//             },\n//             y: {\n//                 title: {\n//                     display: true,\n//                     text: 'Inflation Rate (%)'\n//                 }\n//             }\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>Phillips Curve: {selectedEconomy.label}</h2>\n//             <select\n//                 value={selectedEconomy.label}\n//                 onChange={(e) => setSelectedEconomy(economies.find(econ => econ.label === e.target.value))}\n//             >\n//                 {economies.map(econ => (\n//                     <option key={econ.label} value={econ.label}>{econ.label}</option>\n//                 ))}\n//             </select>\n//             <div>\n//                 <Scatter data={chartData} options={options} />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default PhillipsCurveGraph;\n\nimport React, { useState, useEffect } from 'react';\nimport { Scatter } from 'react-chartjs-2';\nimport axios from 'axios';\nimport 'chart.js/auto'; // Ensure Chart.js is imported correctly\nimport regression from 'regression';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\"; // Your backend Express server\n\n// Expanded list of economies\nconst economies = [{\n  label: 'United States',\n  inflationSeries: 'CPIAUCSL',\n  unemploymentSeries: 'UNRATE'\n}, {\n  label: 'United Kingdom',\n  inflationSeries: 'GBRCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTGBQ156S'\n}, {\n  label: 'Germany',\n  inflationSeries: 'DEUCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTDEQ156S'\n}, {\n  label: 'Japan',\n  inflationSeries: 'JPNCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTJPQ156S'\n}\n// Add more economies here as needed\n];\nconst fetchData = async seriesId => {\n  try {\n    const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n      params: {\n        seriesId\n      }\n    });\n    return response.data.data.map(obs => ({\n      date: obs.date,\n      value: parseFloat(obs.value)\n    }));\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    return [];\n  }\n};\nconst PhillipsCurveGraph = () => {\n  _s();\n  const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n  const [data, setData] = useState([]);\n  const [startDate, setStartDate] = useState('2020-01-01');\n  const [endDate, setEndDate] = useState('2023-12-31');\n  useEffect(() => {\n    const getData = async () => {\n      const inflationData = await fetchData(selectedEconomy.inflationSeries);\n      const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n      if (inflationData.length && unemploymentData.length) {\n        // Filter data by the selected date range\n        const filteredInflationData = inflationData.filter(entry => entry.date >= startDate && entry.date <= endDate);\n        const filteredUnemploymentData = unemploymentData.filter(entry => entry.date >= startDate && entry.date <= endDate);\n\n        // Calculate previous year's average inflation\n        const averagedInflationData = filteredInflationData.map((inflation, index) => {\n          var _filteredUnemployment;\n          if (index < 4) return null; // Not enough data to calculate average\n          const pastYearData = filteredInflationData.slice(index - 4, index);\n          const avgInflation = pastYearData.reduce((sum, entry) => sum + entry.value, 0) / 4;\n          return {\n            date: inflation.date,\n            inflation: inflation.value - avgInflation,\n            unemployment: (_filteredUnemployment = filteredUnemploymentData.find(u => u.date === inflation.date)) === null || _filteredUnemployment === void 0 ? void 0 : _filteredUnemployment.value\n          };\n        }).filter(entry => entry && entry.unemployment != null);\n        setData(averagedInflationData);\n      } else {\n        setData([]); // Clear data if there's an issue\n      }\n    };\n    getData();\n  }, [selectedEconomy, startDate, endDate]);\n\n  // Fit the Phillips Curve regression\n  const fitCurve = data => {\n    const points = data.map(d => [d.unemployment, d.inflation]);\n\n    // Perform linear regression\n    const result = regression.linear(points);\n\n    // Generate curve data\n    const curveData = points.map(point => ({\n      x: point[0],\n      y: result.predict(point[0])[1]\n    }));\n    return curveData;\n  };\n  const curveData = fitCurve(data);\n  const chartData = {\n    datasets: [{\n      label: 'Data Points',\n      data: data.map(entry => ({\n        x: entry.unemployment,\n        y: entry.inflation\n      })),\n      backgroundColor: 'rgba(75,192,192,0.6)',\n      pointRadius: 5\n    }, {\n      label: 'Fitted Curve',\n      data: curveData,\n      borderColor: 'rgba(255,99,132,1)',\n      backgroundColor: 'rgba(255,99,132,0.2)',\n      type: 'line',\n      borderWidth: 2\n    }]\n  };\n  const options = {\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Unemployment Rate (%)'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Inflation Rate (%)'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Phillips Curve: \", selectedEconomy.label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedEconomy.label,\n      onChange: e => setSelectedEconomy(economies.find(econ => econ.label === e.target.value)),\n      children: economies.map(econ => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: econ.label,\n        children: econ.label\n      }, econ.label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Start Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: startDate,\n          onChange: e => setStartDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"End Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: endDate,\n          onChange: e => setEndDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Scatter, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 9\n  }, this);\n};\n_s(PhillipsCurveGraph, \"nRZMLoVPps3xiL0xLQd1jkZoV9I=\");\n_c = PhillipsCurveGraph;\nexport default PhillipsCurveGraph;\nvar _c;\n$RefreshReg$(_c, \"PhillipsCurveGraph\");","map":{"version":3,"names":["React","useState","useEffect","Scatter","axios","regression","jsxDEV","_jsxDEV","BASE_URL","process","env","REACT_APP_BASE_URL","economies","label","inflationSeries","unemploymentSeries","fetchData","seriesId","response","get","params","data","map","obs","date","value","parseFloat","error","console","PhillipsCurveGraph","_s","selectedEconomy","setSelectedEconomy","setData","startDate","setStartDate","endDate","setEndDate","getData","inflationData","unemploymentData","length","filteredInflationData","filter","entry","filteredUnemploymentData","averagedInflationData","inflation","index","_filteredUnemployment","pastYearData","slice","avgInflation","reduce","sum","unemployment","find","u","fitCurve","points","d","result","linear","curveData","point","x","y","predict","chartData","datasets","backgroundColor","pointRadius","borderColor","type","borderWidth","options","scales","title","display","text","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","econ","target","_c","$RefreshReg$"],"sources":["/Users/bradyflannery/Documents/Coding Projects/north_shore/frontend/src/phillips-curves/PhillipsCurveGraph.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Scatter } from 'react-chartjs-2';\n// import axios from 'axios';\n// import 'chart.js/auto'; // Ensure Chart.js is imported correctly\n// import regression from 'regression';\n\n// const BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\"; // Your backend Express server\n\n// // Expanded list of economies\n// const economies = [\n//     { label: 'United States', inflationSeries: 'CPIAUCSL', unemploymentSeries: 'UNRATE' },\n//     { label: 'United Kingdom', inflationSeries: 'GBRCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTGBQ156S' },\n//     { label: 'Germany', inflationSeries: 'DEUCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTDEQ156S' },\n//     { label: 'Japan', inflationSeries: 'JPNCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTJPQ156S' },\n//     // Add more economies here as needed\n// ];\n\n// const fetchData = async (seriesId) => {\n//     try {\n//         const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n//             params: { seriesId }\n//         });\n//         return response.data.data.map(obs => ({\n//             date: obs.date,\n//             value: parseFloat(obs.value)\n//         }));\n//     } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         return [];\n//     }\n// };\n\n// const PhillipsCurveGraph = () => {\n//     const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n//     const [data, setData] = useState([]);\n\n//     useEffect(() => {\n//         const getData = async () => {\n//             const inflationData = await fetchData(selectedEconomy.inflationSeries);\n//             const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n\n//             if (inflationData.length && unemploymentData.length) {\n//                 // Calculate previous year's average inflation\n//                 const averagedInflationData = inflationData.map((inflation, index) => {\n//                     if (index < 4) return null; // Not enough data to calculate average\n//                     const pastYearData = inflationData.slice(index - 4, index);\n//                     const avgInflation = pastYearData.reduce((sum, entry) => sum + entry.value, 0) / 4;\n//                     return {\n//                         date: inflation.date,\n//                         inflation: inflation.value - avgInflation,\n//                         unemployment: unemploymentData.find(u => u.date === inflation.date)?.value\n//                     };\n//                 }).filter(entry => entry && entry.unemployment != null);\n\n//                 setData(averagedInflationData);\n//             } else {\n//                 setData([]); // Clear data if there's an issue\n//             }\n//         };\n\n//         getData();\n//     }, [selectedEconomy]);\n\n//     // Fit the Phillips Curve regression\n//     const fitCurve = (data) => {\n//         const points = data.map(d => [d.unemployment, d.inflation]);\n\n//         // Perform linear regression\n//         const result = regression.linear(points);\n\n//         // Generate curve data\n//         const curveData = points.map(point => ({\n//             x: point[0],\n//             y: result.predict(point[0])[1]\n//         }));\n\n//         return curveData;\n//     };\n\n//     const curveData = fitCurve(data);\n\n//     const chartData = {\n//         datasets: [\n//             {\n//                 label: 'Data Points',\n//                 data: data.map(entry => ({\n//                     x: entry.unemployment,\n//                     y: entry.inflation\n//                 })),\n//                 backgroundColor: 'rgba(75,192,192,0.6)',\n//                 pointRadius: 5\n//             },\n//             {\n//                 label: 'Fitted Curve',\n//                 data: curveData,\n//                 borderColor: 'rgba(255,99,132,1)',\n//                 backgroundColor: 'rgba(255,99,132,0.2)',\n//                 type: 'line',\n//                 borderWidth: 2\n//             }\n//         ]\n//     };\n\n//     const options = {\n//         scales: {\n//             x: {\n//                 title: {\n//                     display: true,\n//                     text: 'Unemployment Rate (%)'\n//                 }\n//             },\n//             y: {\n//                 title: {\n//                     display: true,\n//                     text: 'Inflation Rate (%)'\n//                 }\n//             }\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>Phillips Curve: {selectedEconomy.label}</h2>\n//             <select\n//                 value={selectedEconomy.label}\n//                 onChange={(e) => setSelectedEconomy(economies.find(econ => econ.label === e.target.value))}\n//             >\n//                 {economies.map(econ => (\n//                     <option key={econ.label} value={econ.label}>{econ.label}</option>\n//                 ))}\n//             </select>\n//             <div>\n//                 <Scatter data={chartData} options={options} />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default PhillipsCurveGraph;\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { Scatter } from 'react-chartjs-2';\nimport axios from 'axios';\nimport 'chart.js/auto'; // Ensure Chart.js is imported correctly\nimport regression from 'regression';\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\"; // Your backend Express server\n\n// Expanded list of economies\nconst economies = [\n    { label: 'United States', inflationSeries: 'CPIAUCSL', unemploymentSeries: 'UNRATE' },\n    { label: 'United Kingdom', inflationSeries: 'GBRCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTGBQ156S' },\n    { label: 'Germany', inflationSeries: 'DEUCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTDEQ156S' },\n    { label: 'Japan', inflationSeries: 'JPNCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTJPQ156S' },\n    // Add more economies here as needed\n];\n\nconst fetchData = async (seriesId) => {\n    try {\n        const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n            params: { seriesId }\n        });\n        return response.data.data.map(obs => ({\n            date: obs.date,\n            value: parseFloat(obs.value)\n        }));\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        return [];\n    }\n};\n\nconst PhillipsCurveGraph = () => {\n    const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n    const [data, setData] = useState([]);\n    const [startDate, setStartDate] = useState('2020-01-01');\n    const [endDate, setEndDate] = useState('2023-12-31');\n\n    useEffect(() => {\n        const getData = async () => {\n            const inflationData = await fetchData(selectedEconomy.inflationSeries);\n            const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n\n            if (inflationData.length && unemploymentData.length) {\n                // Filter data by the selected date range\n                const filteredInflationData = inflationData.filter(entry => entry.date >= startDate && entry.date <= endDate);\n                const filteredUnemploymentData = unemploymentData.filter(entry => entry.date >= startDate && entry.date <= endDate);\n\n                // Calculate previous year's average inflation\n                const averagedInflationData = filteredInflationData.map((inflation, index) => {\n                    if (index < 4) return null; // Not enough data to calculate average\n                    const pastYearData = filteredInflationData.slice(index - 4, index);\n                    const avgInflation = pastYearData.reduce((sum, entry) => sum + entry.value, 0) / 4;\n                    return {\n                        date: inflation.date,\n                        inflation: inflation.value - avgInflation,\n                        unemployment: filteredUnemploymentData.find(u => u.date === inflation.date)?.value\n                    };\n                }).filter(entry => entry && entry.unemployment != null);\n\n                setData(averagedInflationData);\n            } else {\n                setData([]); // Clear data if there's an issue\n            }\n        };\n\n        getData();\n    }, [selectedEconomy, startDate, endDate]);\n\n    // Fit the Phillips Curve regression\n    const fitCurve = (data) => {\n        const points = data.map(d => [d.unemployment, d.inflation]);\n\n        // Perform linear regression\n        const result = regression.linear(points);\n\n        // Generate curve data\n        const curveData = points.map(point => ({\n            x: point[0],\n            y: result.predict(point[0])[1]\n        }));\n\n        return curveData;\n    };\n\n    const curveData = fitCurve(data);\n\n    const chartData = {\n        datasets: [\n            {\n                label: 'Data Points',\n                data: data.map(entry => ({\n                    x: entry.unemployment,\n                    y: entry.inflation\n                })),\n                backgroundColor: 'rgba(75,192,192,0.6)',\n                pointRadius: 5\n            },\n            {\n                label: 'Fitted Curve',\n                data: curveData,\n                borderColor: 'rgba(255,99,132,1)',\n                backgroundColor: 'rgba(255,99,132,0.2)',\n                type: 'line',\n                borderWidth: 2\n            }\n        ]\n    };\n\n    const options = {\n        scales: {\n            x: {\n                title: {\n                    display: true,\n                    text: 'Unemployment Rate (%)'\n                }\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: 'Inflation Rate (%)'\n                }\n            }\n        }\n    };\n\n    return (\n        <div>\n            <h2>Phillips Curve: {selectedEconomy.label}</h2>\n            <select\n                value={selectedEconomy.label}\n                onChange={(e) => setSelectedEconomy(economies.find(econ => econ.label === e.target.value))}\n            >\n                {economies.map(econ => (\n                    <option key={econ.label} value={econ.label}>{econ.label}</option>\n                ))}\n            </select>\n            <div>\n                <label>\n                    Start Date:\n                    <input\n                        type=\"date\"\n                        value={startDate}\n                        onChange={(e) => setStartDate(e.target.value)}\n                    />\n                </label>\n                <label>\n                    End Date:\n                    <input\n                        type=\"date\"\n                        value={endDate}\n                        onChange={(e) => setEndDate(e.target.value)}\n                    />\n                </label>\n            </div>\n            <div>\n                <Scatter data={chartData} options={options} />\n            </div>\n        </div>\n    );\n};\n\nexport default PhillipsCurveGraph;\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,iBAAiB;AACzC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,eAAe,CAAC,CAAC;AACxB,OAAOC,UAAU,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,IAAI,uBAAuB,CAAC,CAAC;;AAE5E;AACA,MAAMC,SAAS,GAAG,CACd;EAAEC,KAAK,EAAE,eAAe;EAAEC,eAAe,EAAE,UAAU;EAAEC,kBAAkB,EAAE;AAAS,CAAC,EACrF;EAAEF,KAAK,EAAE,gBAAgB;EAAEC,eAAe,EAAE,iBAAiB;EAAEC,kBAAkB,EAAE;AAAkB,CAAC,EACtG;EAAEF,KAAK,EAAE,SAAS;EAAEC,eAAe,EAAE,iBAAiB;EAAEC,kBAAkB,EAAE;AAAkB,CAAC,EAC/F;EAAEF,KAAK,EAAE,OAAO;EAAEC,eAAe,EAAE,iBAAiB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}