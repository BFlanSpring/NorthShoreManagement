{"ast":null,"code":"var _jsxFileName = \"/Users/bradyflannery/Documents/Coding Projects/north_shore/frontend/src/phillips-curves/PhillipsCurveGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = '38b20c6d4ddce071568e81cdf5532506';\nconst BASE_URL = 'https://api.stlouisfed.org/fred/series/observations';\nconst economies = [{\n  label: 'United States',\n  inflationSeries: 'CPIAUCSL',\n  unemploymentSeries: 'UNRATE'\n}, {\n  label: 'United Kingdom',\n  inflationSeries: 'GBRCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTGBQ156S'\n}, {\n  label: 'Germany',\n  inflationSeries: 'DEUCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTDEQ156S'\n}, {\n  label: 'Japan',\n  inflationSeries: 'JPNCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTJPQ156S'\n}];\nconst fetchData = async seriesId => {\n  const response = await axios.get(BASE_URL, {\n    params: {\n      series_id: seriesId,\n      api_key: API_KEY,\n      file_type: 'json'\n    }\n  });\n  return response.data.observations.map(obs => ({\n    date: obs.date,\n    value: parseFloat(obs.value)\n  }));\n};\nconst PhillipsCurveGraph = () => {\n  _s();\n  const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const getData = async () => {\n      const inflationData = await fetchData(selectedEconomy.inflationSeries);\n      const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n      const mergedData = inflationData.map((inflation, idx) => {\n        var _unemploymentData$idx;\n        return {\n          date: inflation.date,\n          inflation: inflation.value,\n          unemployment: ((_unemploymentData$idx = unemploymentData[idx]) === null || _unemploymentData$idx === void 0 ? void 0 : _unemploymentData$idx.value) || null\n        };\n      });\n      setData(mergedData);\n    };\n    getData();\n  }, [selectedEconomy]);\n  const chartData = {\n    labels: data.map(entry => entry.date),\n    datasets: [{\n      label: 'Inflation Rate',\n      data: data.map(entry => entry.inflation),\n      borderColor: 'rgba(75,192,192,1)',\n      backgroundColor: 'rgba(75,192,192,0.2)',\n      yAxisID: 'y-axis-1'\n    }, {\n      label: 'Unemployment Rate',\n      data: data.map(entry => entry.unemployment),\n      borderColor: 'rgba(153,102,255,1)',\n      backgroundColor: 'rgba(153,102,255,0.2)',\n      yAxisID: 'y-axis-2'\n    }]\n  };\n  const options = {\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      },\n      'y-axis-1': {\n        type: 'linear',\n        position: 'left',\n        title: {\n          display: true,\n          text: 'Inflation Rate (%)'\n        }\n      },\n      'y-axis-2': {\n        type: 'linear',\n        position: 'right',\n        title: {\n          display: true,\n          text: 'Unemployment Rate (%)'\n        },\n        grid: {\n          drawOnChartArea: false\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Phillips Curve: \", selectedEconomy.label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedEconomy.label,\n      onChange: e => setSelectedEconomy(economies.find(econ => econ.label === e.target.value)),\n      children: economies.map(econ => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: econ.label,\n        children: econ.label\n      }, econ.label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s(PhillipsCurveGraph, \"tUJeP57Ba7aX2IyEB2NSaqb5avM=\");\n_c = PhillipsCurveGraph;\nexport default PhillipsCurveGraph;\nvar _c;\n$RefreshReg$(_c, \"PhillipsCurveGraph\");","map":{"version":3,"names":["React","useState","useEffect","Line","axios","jsxDEV","_jsxDEV","API_KEY","BASE_URL","economies","label","inflationSeries","unemploymentSeries","fetchData","seriesId","response","get","params","series_id","api_key","file_type","data","observations","map","obs","date","value","parseFloat","PhillipsCurveGraph","_s","selectedEconomy","setSelectedEconomy","setData","getData","inflationData","unemploymentData","mergedData","inflation","idx","_unemploymentData$idx","unemployment","chartData","labels","entry","datasets","borderColor","backgroundColor","yAxisID","options","scales","x","title","display","text","type","position","grid","drawOnChartArea","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","find","econ","target","_c","$RefreshReg$"],"sources":["/Users/bradyflannery/Documents/Coding Projects/north_shore/frontend/src/phillips-curves/PhillipsCurveGraph.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport 'chart.js/auto';\n\nconst API_KEY = '38b20c6d4ddce071568e81cdf5532506';\nconst BASE_URL = 'https://api.stlouisfed.org/fred/series/observations';\n\nconst economies = [\n    { label: 'United States', inflationSeries: 'CPIAUCSL', unemploymentSeries: 'UNRATE' },\n    { label: 'United Kingdom', inflationSeries: 'GBRCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTGBQ156S' },\n    { label: 'Germany', inflationSeries: 'DEUCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTDEQ156S' },\n    { label: 'Japan', inflationSeries: 'JPNCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTJPQ156S' },\n];\n\nconst fetchData = async (seriesId) => {\n    const response = await axios.get(BASE_URL, {\n        params: {\n            series_id: seriesId,\n            api_key: API_KEY,\n            file_type: 'json'\n        }\n\n    });\n    return response.data.observations.map(obs => ({\n        date: obs.date,\n        value: parseFloat(obs.value)\n    }));\n};\n\n\nconst PhillipsCurveGraph = () => {\n    const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        const getData = async () => {\n            const inflationData = await fetchData(selectedEconomy.inflationSeries);\n            const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n\n            const mergedData = inflationData.map((inflation, idx) => ({\n                date: inflation.date,\n                inflation: inflation.value,\n                unemployment: unemploymentData[idx]?.value || null\n            }));\n\n            setData(mergedData);\n        };\n        getData();\n    }, [selectedEconomy]);\n\n    const chartData = {\n        labels: data.map(entry => entry.date),\n        datasets: [\n            {\n                label: 'Inflation Rate',\n                data: data.map(entry => entry.inflation),\n                borderColor: 'rgba(75,192,192,1)',\n                backgroundColor: 'rgba(75,192,192,0.2)',\n                yAxisID: 'y-axis-1',\n            },\n            {\n                label: 'Unemployment Rate',\n                data: data.map(entry => entry.unemployment),\n                borderColor: 'rgba(153,102,255,1)',\n                backgroundColor: 'rgba(153,102,255,0.2)',\n                yAxisID: 'y-axis-2',\n            }\n        ]\n    };\n\n    const options = {\n        scales: {\n            x: {\n                title: {\n                    display: true,\n                    text: 'Date',\n                },\n            },\n            'y-axis-1': {\n                type: 'linear',\n                position: 'left',\n                title: {\n                    display: true,\n                    text: 'Inflation Rate (%)',\n                },\n            },\n            'y-axis-2': {\n                type: 'linear',\n                position: 'right',\n                title: {\n                    display: true,\n                    text: 'Unemployment Rate (%)',\n                },\n                grid: {\n                    drawOnChartArea: false,\n                },\n            },\n        },\n    };\n\n    return (\n        <div>\n            <h2>Phillips Curve: {selectedEconomy.label}</h2>\n            <select\n                value={selectedEconomy.label}\n                onChange={(e) => setSelectedEconomy(economies.find(econ => econ.label === e.target.value))}\n            >\n                {economies.map(econ => (\n                    <option key={econ.label} value={econ.label}>{econ.label}</option>\n                ))}\n            </select>\n            <div>\n                <Line data={chartData} options={options} />\n            </div>\n        </div>\n    );\n\n};\n\nexport default PhillipsCurveGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}