{"ast":null,"code":"var _jsxFileName = \"/Users/bradyflannery/Documents/Coding Projects/north_shore/frontend/src/phillips-curves/PhillipsCurveGraph.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Line } from 'react-chartjs-2';\n// import axios from 'axios';\n// import 'chart.js/auto';\n\n// const BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\"; // Your backend Express server\n\n// const economies = [\n//     { label: 'United States', inflationSeries: 'CPIAUCSL', unemploymentSeries: 'UNRATE' },\n//     { label: 'United Kingdom', inflationSeries: 'GBRCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTGBQ156S' },\n//     { label: 'Germany', inflationSeries: 'DEUCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTDEQ156S' },\n//     { label: 'Japan', inflationSeries: 'JPNCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTJPQ156S' },\n// ];\n\n// const fetchData = async (seriesId) => {\n//     try {\n//         const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n//             params: { seriesId }\n//         });\n//         return response.data.data.map(obs => ({\n//             date: obs.date,\n//             value: parseFloat(obs.value)\n//         }));\n//     } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         return [];\n//     }\n// };\n\n// const PhillipsCurveGraph = () => {\n//     const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n//     const [data, setData] = useState([]);\n\n//     useEffect(() => {\n//         const getData = async () => {\n//             const inflationData = await fetchData(selectedEconomy.inflationSeries);\n//             const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n\n//             if (inflationData.length && unemploymentData.length) {\n//                 const mergedData = inflationData.map((inflation) => {\n//                     const unemployment = unemploymentData.find(u => u.date === inflation.date);\n//                     return {\n//                         date: inflation.date,\n//                         inflation: inflation.value,\n//                         unemployment: unemployment ? unemployment.value : null\n//                     };\n//                 });\n//                 setData(mergedData);\n//             } else {\n//                 setData([]); // Clear data if there's an issue\n//             }\n//         };\n\n//         getData();\n//     }, [selectedEconomy]);\n\n//     const chartData = {\n//         labels: data.map(entry => entry.date),\n//         datasets: [\n//             {\n//                 label: 'Inflation Rate',\n//                 data: data.map(entry => entry.inflation),\n//                 borderColor: 'rgba(75,192,192,1)',\n//                 backgroundColor: 'rgba(75,192,192,0.2)',\n//                 yAxisID: 'y-axis-1',\n//             },\n//             {\n//                 label: 'Unemployment Rate',\n//                 data: data.map(entry => entry.unemployment),\n//                 borderColor: 'rgba(153,102,255,1)',\n//                 backgroundColor: 'rgba(153,102,255,0.2)',\n//                 yAxisID: 'y-axis-2',\n//             }\n//         ]\n//     };\n\n//     const options = {\n//         scales: {\n//             x: {\n//                 title: {\n//                     display: true,\n//                     text: 'Date',\n//                 },\n//             },\n//             'y-axis-1': {\n//                 type: 'linear',\n//                 position: 'left',\n//                 title: {\n//                     display: true,\n//                     text: 'Inflation Rate (%)',\n//                 },\n//             },\n//             'y-axis-2': {\n//                 type: 'linear',\n//                 position: 'right',\n//                 title: {\n//                     display: true,\n//                     text: 'Unemployment Rate (%)',\n//                 },\n//                 grid: {\n//                     drawOnChartArea: false,\n//                 },\n//             },\n//         },\n//     };\n\n//     return (\n//         <div>\n//             <h2>Phillips Curve: {selectedEconomy.label}</h2>\n//             <select\n//                 value={selectedEconomy.label}\n//                 onChange={(e) => setSelectedEconomy(economies.find(econ => econ.label === e.target.value))}\n//             >\n//                 {economies.map(econ => (\n//                     <option key={econ.label} value={econ.label}>{econ.label}</option>\n//                 ))}\n//             </select>\n//             <div>\n//                 <Line data={chartData} options={options} />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default PhillipsCurveGraph;\n\nimport React, { useState, useEffect } from 'react';\nimport { Scatter } from 'react-chartjs-2';\nimport axios from 'axios';\nimport 'chart.js/auto'; // Ensure Chart.js is imported correctly\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\"; // Your backend Express server\n\nconst economies = [{\n  label: 'United States',\n  inflationSeries: 'CPIAUCSL',\n  unemploymentSeries: 'UNRATE'\n}, {\n  label: 'United Kingdom',\n  inflationSeries: 'GBRCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTGBQ156S'\n}, {\n  label: 'Germany',\n  inflationSeries: 'DEUCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTDEQ156S'\n}, {\n  label: 'Japan',\n  inflationSeries: 'JPNCPIALLMINMEI',\n  unemploymentSeries: 'LRUNTTTTJPQ156S'\n}];\nconst fetchData = async seriesId => {\n  try {\n    const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n      params: {\n        seriesId\n      }\n    });\n    return response.data.data.map(obs => ({\n      date: obs.date,\n      value: parseFloat(obs.value)\n    }));\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    return [];\n  }\n};\nconst PhillipsCurveGraph = () => {\n  _s();\n  const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const getData = async () => {\n      const inflationData = await fetchData(selectedEconomy.inflationSeries);\n      const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n      if (inflationData.length && unemploymentData.length) {\n        // Calculate previous year's average inflation\n        const averagedInflationData = inflationData.map((inflation, index) => {\n          var _unemploymentData$fin;\n          if (index < 4) return null; // Not enough data to calculate average\n          const pastYearData = inflationData.slice(index - 4, index);\n          const avgInflation = pastYearData.reduce((sum, entry) => sum + entry.value, 0) / 4;\n          return {\n            date: inflation.date,\n            inflation: inflation.value - avgInflation,\n            unemployment: (_unemploymentData$fin = unemploymentData.find(u => u.date === inflation.date)) === null || _unemploymentData$fin === void 0 ? void 0 : _unemploymentData$fin.value\n          };\n        }).filter(entry => entry && entry.unemployment != null);\n        setData(averagedInflationData);\n      } else {\n        setData([]); // Clear data if there's an issue\n      }\n    };\n    getData();\n  }, [selectedEconomy]);\n\n  // Fit the Phillips Curve regression\n  const fitCurve = data => {\n    const points = data.map(d => [d.unemployment, d.inflation]);\n\n    // Perform linear regression\n    const result = regression.linear(points);\n\n    // Generate curve data\n    const curveData = points.map(point => ({\n      x: point[0],\n      y: result.predict(point[0])[1]\n    }));\n    return curveData;\n  };\n  const curveData = fitCurve(data);\n  const chartData = {\n    datasets: [{\n      label: 'Data Points',\n      data: data.map(entry => ({\n        x: entry.unemployment,\n        y: entry.inflation\n      })),\n      backgroundColor: 'rgba(75,192,192,0.6)',\n      pointRadius: 5\n    }, {\n      label: 'Fitted Curve',\n      data: curveData,\n      borderColor: 'rgba(255,99,132,1)',\n      backgroundColor: 'rgba(255,99,132,0.2)',\n      type: 'line',\n      borderWidth: 2\n    }]\n  };\n  const options = {\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Unemployment Rate (%)'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Inflation Rate (%)'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Phillips Curve: \", selectedEconomy.label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedEconomy.label,\n      onChange: e => setSelectedEconomy(economies.find(econ => econ.label === e.target.value)),\n      children: economies.map(econ => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: econ.label,\n        children: econ.label\n      }, econ.label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Scatter, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 9\n  }, this);\n};\n_s(PhillipsCurveGraph, \"tUJeP57Ba7aX2IyEB2NSaqb5avM=\");\n_c = PhillipsCurveGraph;\nexport default PhillipsCurveGraph;\nvar _c;\n$RefreshReg$(_c, \"PhillipsCurveGraph\");","map":{"version":3,"names":["React","useState","useEffect","Scatter","axios","jsxDEV","_jsxDEV","BASE_URL","process","env","REACT_APP_BASE_URL","economies","label","inflationSeries","unemploymentSeries","fetchData","seriesId","response","get","params","data","map","obs","date","value","parseFloat","error","console","PhillipsCurveGraph","_s","selectedEconomy","setSelectedEconomy","setData","getData","inflationData","unemploymentData","length","averagedInflationData","inflation","index","_unemploymentData$fin","pastYearData","slice","avgInflation","reduce","sum","entry","unemployment","find","u","filter","fitCurve","points","d","result","regression","linear","curveData","point","x","y","predict","chartData","datasets","backgroundColor","pointRadius","borderColor","type","borderWidth","options","scales","title","display","text","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","econ","target","_c","$RefreshReg$"],"sources":["/Users/bradyflannery/Documents/Coding Projects/north_shore/frontend/src/phillips-curves/PhillipsCurveGraph.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Line } from 'react-chartjs-2';\n// import axios from 'axios';\n// import 'chart.js/auto';\n\n// const BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\"; // Your backend Express server\n\n// const economies = [\n//     { label: 'United States', inflationSeries: 'CPIAUCSL', unemploymentSeries: 'UNRATE' },\n//     { label: 'United Kingdom', inflationSeries: 'GBRCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTGBQ156S' },\n//     { label: 'Germany', inflationSeries: 'DEUCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTDEQ156S' },\n//     { label: 'Japan', inflationSeries: 'JPNCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTJPQ156S' },\n// ];\n\n// const fetchData = async (seriesId) => {\n//     try {\n//         const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n//             params: { seriesId }\n//         });\n//         return response.data.data.map(obs => ({\n//             date: obs.date,\n//             value: parseFloat(obs.value)\n//         }));\n//     } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         return [];\n//     }\n// };\n\n// const PhillipsCurveGraph = () => {\n//     const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n//     const [data, setData] = useState([]);\n\n//     useEffect(() => {\n//         const getData = async () => {\n//             const inflationData = await fetchData(selectedEconomy.inflationSeries);\n//             const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n\n//             if (inflationData.length && unemploymentData.length) {\n//                 const mergedData = inflationData.map((inflation) => {\n//                     const unemployment = unemploymentData.find(u => u.date === inflation.date);\n//                     return {\n//                         date: inflation.date,\n//                         inflation: inflation.value,\n//                         unemployment: unemployment ? unemployment.value : null\n//                     };\n//                 });\n//                 setData(mergedData);\n//             } else {\n//                 setData([]); // Clear data if there's an issue\n//             }\n//         };\n\n//         getData();\n//     }, [selectedEconomy]);\n\n//     const chartData = {\n//         labels: data.map(entry => entry.date),\n//         datasets: [\n//             {\n//                 label: 'Inflation Rate',\n//                 data: data.map(entry => entry.inflation),\n//                 borderColor: 'rgba(75,192,192,1)',\n//                 backgroundColor: 'rgba(75,192,192,0.2)',\n//                 yAxisID: 'y-axis-1',\n//             },\n//             {\n//                 label: 'Unemployment Rate',\n//                 data: data.map(entry => entry.unemployment),\n//                 borderColor: 'rgba(153,102,255,1)',\n//                 backgroundColor: 'rgba(153,102,255,0.2)',\n//                 yAxisID: 'y-axis-2',\n//             }\n//         ]\n//     };\n\n//     const options = {\n//         scales: {\n//             x: {\n//                 title: {\n//                     display: true,\n//                     text: 'Date',\n//                 },\n//             },\n//             'y-axis-1': {\n//                 type: 'linear',\n//                 position: 'left',\n//                 title: {\n//                     display: true,\n//                     text: 'Inflation Rate (%)',\n//                 },\n//             },\n//             'y-axis-2': {\n//                 type: 'linear',\n//                 position: 'right',\n//                 title: {\n//                     display: true,\n//                     text: 'Unemployment Rate (%)',\n//                 },\n//                 grid: {\n//                     drawOnChartArea: false,\n//                 },\n//             },\n//         },\n//     };\n\n//     return (\n//         <div>\n//             <h2>Phillips Curve: {selectedEconomy.label}</h2>\n//             <select\n//                 value={selectedEconomy.label}\n//                 onChange={(e) => setSelectedEconomy(economies.find(econ => econ.label === e.target.value))}\n//             >\n//                 {economies.map(econ => (\n//                     <option key={econ.label} value={econ.label}>{econ.label}</option>\n//                 ))}\n//             </select>\n//             <div>\n//                 <Line data={chartData} options={options} />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default PhillipsCurveGraph;\n\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { Scatter } from 'react-chartjs-2';\nimport axios from 'axios';\nimport 'chart.js/auto'; // Ensure Chart.js is imported correctly\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\"; // Your backend Express server\n\nconst economies = [\n    { label: 'United States', inflationSeries: 'CPIAUCSL', unemploymentSeries: 'UNRATE' },\n    { label: 'United Kingdom', inflationSeries: 'GBRCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTGBQ156S' },\n    { label: 'Germany', inflationSeries: 'DEUCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTDEQ156S' },\n    { label: 'Japan', inflationSeries: 'JPNCPIALLMINMEI', unemploymentSeries: 'LRUNTTTTJPQ156S' },\n];\n\nconst fetchData = async (seriesId) => {\n    try {\n        const response = await axios.get(`${BASE_URL}/api/fred-data`, {\n            params: { seriesId }\n        });\n        return response.data.data.map(obs => ({\n            date: obs.date,\n            value: parseFloat(obs.value)\n        }));\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        return [];\n    }\n};\n\nconst PhillipsCurveGraph = () => {\n    const [selectedEconomy, setSelectedEconomy] = useState(economies[0]);\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        const getData = async () => {\n            const inflationData = await fetchData(selectedEconomy.inflationSeries);\n            const unemploymentData = await fetchData(selectedEconomy.unemploymentSeries);\n\n            if (inflationData.length && unemploymentData.length) {\n                // Calculate previous year's average inflation\n                const averagedInflationData = inflationData.map((inflation, index) => {\n                    if (index < 4) return null; // Not enough data to calculate average\n                    const pastYearData = inflationData.slice(index - 4, index);\n                    const avgInflation = pastYearData.reduce((sum, entry) => sum + entry.value, 0) / 4;\n                    return {\n                        date: inflation.date,\n                        inflation: inflation.value - avgInflation,\n                        unemployment: unemploymentData.find(u => u.date === inflation.date)?.value\n                    };\n                }).filter(entry => entry && entry.unemployment != null);\n\n                setData(averagedInflationData);\n            } else {\n                setData([]); // Clear data if there's an issue\n            }\n        };\n\n        getData();\n    }, [selectedEconomy]);\n\n    // Fit the Phillips Curve regression\n    const fitCurve = (data) => {\n        const points = data.map(d => [d.unemployment, d.inflation]);\n\n        // Perform linear regression\n        const result = regression.linear(points);\n\n        // Generate curve data\n        const curveData = points.map(point => ({\n            x: point[0],\n            y: result.predict(point[0])[1]\n        }));\n\n        return curveData;\n    };\n\n    const curveData = fitCurve(data);\n\n    const chartData = {\n        datasets: [\n            {\n                label: 'Data Points',\n                data: data.map(entry => ({\n                    x: entry.unemployment,\n                    y: entry.inflation\n                })),\n                backgroundColor: 'rgba(75,192,192,0.6)',\n                pointRadius: 5\n            },\n            {\n                label: 'Fitted Curve',\n                data: curveData,\n                borderColor: 'rgba(255,99,132,1)',\n                backgroundColor: 'rgba(255,99,132,0.2)',\n                type: 'line',\n                borderWidth: 2\n            }\n        ]\n    };\n\n    const options = {\n        scales: {\n            x: {\n                title: {\n                    display: true,\n                    text: 'Unemployment Rate (%)'\n                }\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: 'Inflation Rate (%)'\n                }\n            }\n        }\n    };\n\n    return (\n        <div>\n            <h2>Phillips Curve: {selectedEconomy.label}</h2>\n            <select\n                value={selectedEconomy.label}\n                onChange={(e) => setSelectedEconomy(economies.find(econ => econ.label === e.target.value))}\n            >\n                {economies.map(econ => (\n                    <option key={econ.label} value={econ.label}>{econ.label}</option>\n                ))}\n            </select>\n            <div>\n                <Scatter data={chartData} options={options} />\n            </div>\n        </div>\n    );\n};\n\nexport default PhillipsCurveGraph;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAQA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,iBAAiB;AACzC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,IAAI,uBAAuB,CAAC,CAAC;;AAE5E,MAAMC,SAAS,GAAG,CACd;EAAEC,KAAK,EAAE,eAAe;EAAEC,eAAe,EAAE,UAAU;EAAEC,kBAAkB,EAAE;AAAS,CAAC,EACrF;EAAEF,KAAK,EAAE,gBAAgB;EAAEC,eAAe,EAAE,iBAAiB;EAAEC,kBAAkB,EAAE;AAAkB,CAAC,EACtG;EAAEF,KAAK,EAAE,SAAS;EAAEC,eAAe,EAAE,iBAAiB;EAAEC,kBAAkB,EAAE;AAAkB,CAAC,EAC/F;EAAEF,KAAK,EAAE,OAAO;EAAEC,eAAe,EAAE,iBAAiB;EAAEC,kBAAkB,EAAE;AAAkB,CAAC,CAChG;AAED,MAAMC,SAAS,GAAG,MAAOC,QAAQ,IAAK;EAClC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}